name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 推送 tag 时触发
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手动触发

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'node-cache'

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            ~/.yarn
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Lint code
        run: |
          if (Test-Path "package.json") {
            $packageJson = Get-Content "package.json" | ConvertFrom-Json
            if ($packageJson.scripts.lint) {
              yarn run lint
            } else {
              Write-Host "No lint script found, skipping..."
            }
          }
        shell: pwsh
        continue-on-error: true

      - name: Get package version
        id: package_version
        run: |
          $version = node -p "require('./package.json').version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Build application
        run: yarn run dist --publish=never

      - name: Verify build output
        run: |
          if (Test-Path "dist") {
            Get-ChildItem "dist" -Recurse | Where-Object { $_.Extension -in @('.exe', '.zip') } | ForEach-Object {
              Write-Host "Built: $($_.Name) - $([math]::Round($_.Length / 1MB, 2)) MB"
            }
          } else {
            Write-Error "Build output directory 'dist' not found!"
            exit 1
          }
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wxpusher-desktop-windows-v${{ steps.package_version.outputs.version }}
          path: |
            dist/*.exe
            dist/*.zip
            dist/*.yml
          compression-level: 6
          retention-days: 30
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package version
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: wxpusher-desktop-windows-v${{ steps.package_version.outputs.version }}
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          echo "## 更新内容" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "- 首次发布：WxPusher 桌面推送客户端" >> CHANGELOG.md
            echo "- 支持微信扫码登录和实时消息推送" >> CHANGELOG.md
            echo "- 系统托盘集成，支持开机自启" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## 下载说明" >> CHANGELOG.md
          echo "- **安装版**: WxPusher-Desktop Setup xxx.exe (推荐)" >> CHANGELOG.md
          echo "- **便携版**: WxPusher-Desktop xxx.exe (免安装)" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          name: WxPusher Desktop v${{ steps.package_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            dist/*Setup*.exe
            dist/*-${{ steps.package_version.outputs.version }}.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
